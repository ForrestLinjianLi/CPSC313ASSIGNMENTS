.pos 0x100
main:
    irmovq $stackEnd, %rsp              # R[%rsp] = $stackEnd
    irmovq $array, %rdi                 # R[%rdi] = $array
    irmovq $arraySize, %rsi             # R[%rsi] = $arraySize
    mrmovq (%rsi), %rsi                 # R[%rsi] = the size of the array
    irmovq $resultStart, %rdx           # R[%rdx = the pointer of the resultStart
    irmovq $resultEnd, %rcx             # R[%rcx = the pointer of the resultEnd
    call   maxSubArray                  # call the maxSubArray function
    irmovq $resultSum, %r8              # R[%r8 = the pointer of the resultSum
    rmmovq %rax, (%r8)                  # save the value in %rax at the address of the result in memory ()
    halt

.pos 0x1000
maxSubArray:
    pushq  %rbx                         # save the caller register value %rbx to stack (callee-save)
    pushq  %rbp                         # save the caller register value %rbp to stack (callee-save)
    pushq  %r12                         # save the caller register value %r12 to stack (callee-save)
    pushq  %r13                         # save the caller register value %r13 to stack (callee-save)
    pushq  %r14                         # save the caller register value %r14 to stack (callee-save)
    irmovq $1, %r9                      # R[%r9] = 1
    subq   %rsi, %r9                    # R[%r9] = 1 - size of the array
    jne    L1                           # if (size == 1)  (jump to L1 if (1 - the size of the array) != 0)
    rmmovq %rdi, (%rcx)                 # *sa_start = array (make the sa_start to be the pointer to the base address of the array)
    rmmovq %rdi, (%rdx)                 # *sa_end = array (make the sa_end to be the pointer to the base address of the array)
    mrmovq (%rdi), %r13                 # store the first element (the only element) of the array to %r13
    jmp    L9                           # jump to L9
L1:
    irmovq $2, %r10                     # R[%r10] = 2
    rrmovq %rsi, %rbx                   # R[%rbx] = the size of the array, the loop condition
    divq   %r10, %rbx                   # half = size >> 1 (R[%rbx] =  the middle of the array)
    irmovq $8, %rbp                     # R[%rbp] = 8
    mulq   %rbx, %rbp                   # R[%rbp] = the offset of the middle element of the array
    addq   %rdi, %rbp                   # *mid = array + half (%rbp = the address of the middle element of the array)
    irmovq $8, %r8                      # R[%r8] = 8
    rrmovq %rsi, %r9                    # R[%r9] = the size of the array
    mulq   %r8, %r9                     # R[%r9] = the number of bytes the array holds
    addq   %rdi, %r9                    # R[%r9] = the address of the last element + 8
    subq   %r8, %r9                     # *end = array + size - 1 (%r9 = the address of the last element)
    xorq   %rax, %rax                   # sum = 0 (%rax = 0)
    irmovq $0x8000000000000000, %r10    # leftsum = LONG_MIN (%r10 = 0x8000000000000000)
    rrmovq %rbp, %r11                   # %r11 = the address of the middle element of the array
    subq   %r8, %r11                    # ptr = mid - 1 (%r11 = the address of the middle of the array - 8)
L2:
    rrmovq %r11, %r12                   # R[%r12] = ptr
    subq   %rdi, %r12                   # R[%r12] = ptr - base address, the loop condition
    jl     L4                           # jump to L4 if !(ptr >= array)
    mrmovq (%r11), %r12                 # %12 = *ptr, load the value of *ptr into %r12
    addq   %r12, %rax                   # sum += *ptr (add the element value to the sum)
    rrmovq %rax, %r12                   # %12 = sum
    subq   %r10, %r12                   # compare the sum and leftsum, the if condition
    jle    L3                           # jump to next iteration if sum < leftsum
    rrmovq %rax, %r10                   # leftsum = sum (%r10 = sum)
    rmmovq %r11, (%rdx)                 # *sa_start = ptr (update the sa_start to be the ptr)
L3:
    subq   %r8, %r11                    # ptr-- (move ptr to point the next left element)
    jmp    L2                           # jump to next iteration
L4:
    irmovq $0x8000000000000000, %r13    # rightsum = LONG_MIN
    rrmovq %rbp, %r11                   # ptr = mid (%r11 = the address of the middle of the array)
    xorq   %rax, %rax                   # sum = 0 (%rax = 0)
L5:
    rrmovq %r11, %r12                   # R[%r12] = ptr
    subq   %r9, %r12                    # R[%r12] = ptr - end, loop condition
    jg     L7                           # jump to L7 if ptr > end
    mrmovq (%r11), %r12                 # R[%r12] = *ptr
    addq   %r12, %rax                   # sum += *ptr (add the element to the sum)
    rrmovq %rax, %r12                   # R[%r12] = sum
    subq   %r13, %r12                   # compare the sum and rightsum
    jle    L6                           # jump to next iteration if sum < rightsum
    rrmovq %rax, %r13                   # rightsum = sum (%r13 = sum)
    rmmovq %r11, (%rcx)                 # *sa_end = ptr (update the sa_end to be the ptr)
L6:
    addq   %r8, %r11                    # ptr++ (move ptr to point the next right element)
    jmp    L5                           # jump to next iteration
L7:
    addq   %r10, %r13                   # bestsum = leftsum + rightsum (%r13 = the sum of leftsum and rightsum)
    rrmovq %rcx, %r14                   # R[%r14] = *sa_end
    rrmovq %rsi, %r9                    # R[%r9] = the array size
    subq   %rbx, %r9                    # R[%r9] = the array size - half size, this variable is used for the second recursive call
    rrmovq %rdx, %r12                   # R[%r12] = *sa_start
    rrmovq %rbx, %rsi                   # R[%rsi] = half size
    rrmovq %r9, %rbx                    # R[%rbx] = size - half size
    pushq  %rdx                         # save sub_start onto the stack (caller-save)
    rrmovq %rsp, %rdx                   # store the stack position of sa_start into %rdx
    pushq  %rcx                         # save sub_end onto the stack (caller-save)
    rrmovq %rsp, %rcx                   # store the stack position of sa_end into %rcx
    call   maxSubArray                  # recursive call
    popq   %rcx                         # retrieve sub_end into %rcx
    popq   %rdx                         # retrieve sub_start into %rdx
    rrmovq %rax, %r9                    # R[%r9] = sum = maxsa(array, half, &sub_start, &sub_end)
    subq   %r13, %r9                    # R[%r9] = sum - bestsum, if condition
    jle    L8                           # jump to L8 if sum <= bestsum
    rrmovq %rax, %r13                   # bestsum = sum (%r13 = sum)
    rmmovq %rdx, (%r12)                 # *sa_start = sub_start
    rmmovq %rcx, (%r14)                 # *sa_end = sub_end
L8:
    rrmovq %rbp, %rdi                   # R[%rdi] = half size
    rrmovq %rbx, %rsi                   # R[%rsi] = size - half size
    pushq  %rdx                         # push sub_start (caller-save)
    rrmovq %rsp, %rdx                   # store the stack position of sa_start into %rdx
    pushq  %rcx                         # push sub_end (caller-save)
    rrmovq %rsp, %rcx                   # store the stack position of sa_end into %rcx
    call   maxSubArray                  # recursive call
    popq   %rcx                         # pop sub_end into %rcx
    popq   %rdx                         # pop sub_start into %rdx
    rrmovq %rax, %r9                    # R[%r9] = sum = maxsa(array, size-half, &sub_start, &sub_end)
    subq   %r13, %r9                    # R[%r9] = sum - bestsum
    jle    L9                           # jump to L9 if sum <= bestsum
    rrmovq %rax, %r13                   # bestsum = sum (%r13 = sum)
    rmmovq %rdx, (%r12)                 # *sa_start = sub_start
    rmmovq %rcx, (%r14)                 # *sa_end = sub_end
L9:
    rrmovq %r13, %rax                   # save the result (bestsum) to return register (%rax = bestsum)
    popq   %r14                         # retrieve %r14 from stack
    popq   %r13                         # retrieve %r13 from stack
    popq   %r12                         # retrieve %r12 from stack
    popq   %rbp                         # retrieve %rbp from stack
    popq   %rbx                         # retrieve %rbx from stack
    ret                                 # return
    
    
.pos 0x2000
array:
    .quad 13
    .quad -3
    .quad -25
    .quad -20
    .quad -3
    .quad -16
    .quad -23
    .quad 18
    .quad 20
    .quad -7
    .quad 12
    .quad -5
    .quad -22
    .quad 15
    .quad -4
    .quad 7
arraySize:
    .quad 16

.pos 0x2500
resultStart:
    .quad 0
resultEnd:
    .quad 0
resultSum:
    .quad 0

.pos 0x4000
stack:
    .quad 0, 1000
stackEnd:
    .quad 0
